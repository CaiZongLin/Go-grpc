// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: work.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceServerClient is the client API for ServiceServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceServerClient interface {
	Search(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductReply, error)
	SearchAll(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetAllProductReply, error)
	InsertProduct(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*StatusReply, error)
	ModifyProduct(ctx context.Context, in *ModifyRequest, opts ...grpc.CallOption) (*StatusReply, error)
	BuyProduct(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*StatusReply, error)
	TurnoverSearch(ctx context.Context, in *TurnoverRequest, opts ...grpc.CallOption) (*TurnoverReply, error)
}

type serviceServerClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceServerClient(cc grpc.ClientConnInterface) ServiceServerClient {
	return &serviceServerClient{cc}
}

func (c *serviceServerClient) Search(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductReply, error) {
	out := new(GetProductReply)
	err := c.cc.Invoke(ctx, "/pb.ServiceServer/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServerClient) SearchAll(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetAllProductReply, error) {
	out := new(GetAllProductReply)
	err := c.cc.Invoke(ctx, "/pb.ServiceServer/SearchAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServerClient) InsertProduct(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/pb.ServiceServer/InsertProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServerClient) ModifyProduct(ctx context.Context, in *ModifyRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/pb.ServiceServer/ModifyProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServerClient) BuyProduct(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/pb.ServiceServer/BuyProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServerClient) TurnoverSearch(ctx context.Context, in *TurnoverRequest, opts ...grpc.CallOption) (*TurnoverReply, error) {
	out := new(TurnoverReply)
	err := c.cc.Invoke(ctx, "/pb.ServiceServer/TurnoverSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServerServer is the server API for ServiceServer service.
// All implementations must embed UnimplementedServiceServerServer
// for forward compatibility
type ServiceServerServer interface {
	Search(context.Context, *GetProductRequest) (*GetProductReply, error)
	SearchAll(context.Context, *GetProductRequest) (*GetAllProductReply, error)
	InsertProduct(context.Context, *InsertRequest) (*StatusReply, error)
	ModifyProduct(context.Context, *ModifyRequest) (*StatusReply, error)
	BuyProduct(context.Context, *BuyRequest) (*StatusReply, error)
	TurnoverSearch(context.Context, *TurnoverRequest) (*TurnoverReply, error)
	mustEmbedUnimplementedServiceServerServer()
}

// UnimplementedServiceServerServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServerServer struct {
}

func (UnimplementedServiceServerServer) Search(context.Context, *GetProductRequest) (*GetProductReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedServiceServerServer) SearchAll(context.Context, *GetProductRequest) (*GetAllProductReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAll not implemented")
}
func (UnimplementedServiceServerServer) InsertProduct(context.Context, *InsertRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertProduct not implemented")
}
func (UnimplementedServiceServerServer) ModifyProduct(context.Context, *ModifyRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyProduct not implemented")
}
func (UnimplementedServiceServerServer) BuyProduct(context.Context, *BuyRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyProduct not implemented")
}
func (UnimplementedServiceServerServer) TurnoverSearch(context.Context, *TurnoverRequest) (*TurnoverReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurnoverSearch not implemented")
}
func (UnimplementedServiceServerServer) mustEmbedUnimplementedServiceServerServer() {}

// UnsafeServiceServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServerServer will
// result in compilation errors.
type UnsafeServiceServerServer interface {
	mustEmbedUnimplementedServiceServerServer()
}

func RegisterServiceServerServer(s grpc.ServiceRegistrar, srv ServiceServerServer) {
	s.RegisterService(&ServiceServer_ServiceDesc, srv)
}

func _ServiceServer_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServerServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServiceServer/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServerServer).Search(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceServer_SearchAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServerServer).SearchAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServiceServer/SearchAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServerServer).SearchAll(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceServer_InsertProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServerServer).InsertProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServiceServer/InsertProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServerServer).InsertProduct(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceServer_ModifyProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServerServer).ModifyProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServiceServer/ModifyProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServerServer).ModifyProduct(ctx, req.(*ModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceServer_BuyProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServerServer).BuyProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServiceServer/BuyProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServerServer).BuyProduct(ctx, req.(*BuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceServer_TurnoverSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurnoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServerServer).TurnoverSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServiceServer/TurnoverSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServerServer).TurnoverSearch(ctx, req.(*TurnoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceServer_ServiceDesc is the grpc.ServiceDesc for ServiceServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ServiceServer",
	HandlerType: (*ServiceServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _ServiceServer_Search_Handler,
		},
		{
			MethodName: "SearchAll",
			Handler:    _ServiceServer_SearchAll_Handler,
		},
		{
			MethodName: "InsertProduct",
			Handler:    _ServiceServer_InsertProduct_Handler,
		},
		{
			MethodName: "ModifyProduct",
			Handler:    _ServiceServer_ModifyProduct_Handler,
		},
		{
			MethodName: "BuyProduct",
			Handler:    _ServiceServer_BuyProduct_Handler,
		},
		{
			MethodName: "TurnoverSearch",
			Handler:    _ServiceServer_TurnoverSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "work.proto",
}
